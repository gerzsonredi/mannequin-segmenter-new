name: Deploy to GCP Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: mannequin-segmenter-new
  REGION: europe-west4
  GAR_LOCATION: europe-west4-docker.pkg.dev
  REPOSITORY: mannequin-segmenter-repo

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}

    - name: Build CPU-optimized Docker image with cache
      run: |
        # Pull latest image for cache
        docker pull ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest || true
        
        # Build with cache from previous builds
        docker build -f Dockerfile \
          --cache-from ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          -t ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest .

    - name: Push Docker image to Artifact Registry
      run: |
        docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

    - name: Deploy to Cloud Run with CPU (0-100 instances, max 50 concurrent)
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 5001 \
          --memory 16Gi \
          --cpu 8 \
          --timeout 900 \
          --cpu-boost \
          --concurrency 10 \
          --min-instances 10 \
          --max-instances 50 \
          --execution-environment gen2 \
          --ingress all \
          --max-surge-type percent \
          --max-surge 100 \
          --use-http2 \
          --set-env-vars="ENVIRONMENT=production,PYTHONPATH=/app,FORCE_CPU=true,CPU_COUNT=2,GCP_BUCKET_NAME=pictures-not-public,GCP_MODELS_BUCKET=artifactsredi,GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }},GCP_SA_KEY=${{ secrets.GCP_SA_KEY }}"

    - name: Route traffic to latest revision
      run: |
        echo "ðŸ”„ Routing 100% traffic to latest revision..."
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --to-latest

    - name: Set public access
      run: |
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member="allUsers" \
          --role="roles/run.invoker" || echo "Public access may be restricted by organization policy"

    - name: Get Cloud Run URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
        echo "ðŸš€ Service deployed to: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Verify deployment
      run: |
        echo "ðŸ§ª Verifying service is running..."
        gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.conditions[0].status)"
        echo "âœ… Service verification completed!"

    - name: Deployment Summary
      run: |
        echo "## ðŸŽ‰ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Auto-scaling**: 2-2 instances (1 concurrent per instance)" >> $GITHUB_STEP_SUMMARY
        echo "- **Memory**: 4Gi per instance" >> $GITHUB_STEP_SUMMARY
        echo "- **CPU**: 2 per instance" >> $GITHUB_STEP_SUMMARY
        echo "- **Total capacity**: 2 parallel requests" >> $GITHUB_STEP_SUMMARY 
